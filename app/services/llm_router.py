from __future__ import annotations

from typing import Any
import requests
import telegramify_markdown
from app.config import CONFIG


DEFAULT_LLM = CONFIG.default_llm


def _yandex_complete(prompt: str, max_tokens: int = 800) -> str:
    url = f"{CONFIG.yandex_api_url}/text:generate"
    headers = {
        "Authorization": f"Api-Key {CONFIG.yandex_api_key}",
        "x-folder-id": CONFIG.yandex_catalog_id,
        "Content-Type": "application/json",
    }
    payload = {
        "modelUri": f"gpt://{CONFIG.yandex_catalog_id}/{CONFIG.yandex_model}",
        "maxTokens": str(min(max_tokens, CONFIG.yandex_max_tokens)),
        "temperature": 0.2,
        "texts": [prompt],
    }
    resp = requests.post(url, headers=headers, json=payload, timeout=60)
    resp.raise_for_status()
    data = resp.json()
    # –û—Ç–≤–µ—Ç Yandex –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è; –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    try:
        return data["result"]["alternatives"][0]["text"]
    except Exception:
        return str(data)


def _gpt5_complete(prompt: str, max_tokens: int = 800) -> str:
    if not CONFIG.gpt5_api_url or not CONFIG.gpt5_api_key:
        raise RuntimeError("GPT-5 creds are not set")
    headers = {"Authorization": f"Bearer {CONFIG.gpt5_api_key}", "Content-Type": "application/json"}
    payload = {"model": CONFIG.gpt5_model or "gpt5", "messages": [{"role": "user", "content": prompt}], "max_tokens": max_tokens}
    resp = requests.post(CONFIG.gpt5_api_url, headers=headers, json=payload, timeout=60)
    resp.raise_for_status()
    data = resp.json()
    try:
        return data["choices"][0]["message"]["content"]
    except Exception:
        return str(data)


def _deepseek_complete(prompt: str, max_tokens: int = 800) -> str:
    headers = {"Authorization": f"Bearer {CONFIG.deepseek_api_key}", "Content-Type": "application/json"}
    payload = {"model": CONFIG.deepseek_model, "messages": [{"role": "user", "content": prompt}], "max_tokens": max_tokens}
    resp = requests.post(CONFIG.deepseek_api_url, headers=headers, json=payload, timeout=60)
    resp.raise_for_status()
    data = resp.json()
    try:
        return data["choices"][0]["message"]["content"]
    except Exception:
        return str(data)


def _format_for_telegram(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram –∏—Å–ø–æ–ª—å–∑—É—è telegramify-markdown."""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π
        if "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç" in text:
            text = text.replace("–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        if "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ" in text:
            text = text.replace("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
        if "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥" in text:
            text = text.replace("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        if "–ù–∞—Å—Ç—Ä–æ–π–∫–∞" in text:
            text = text.replace("–ù–∞—Å—Ç—Ä–æ–π–∫–∞", "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞")
        if "–°–æ–∑–¥–∞–Ω–∏–µ" in text:
            text = text.replace("–°–æ–∑–¥–∞–Ω–∏–µ", "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ")
        if "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è" in text:
            text = text.replace("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        if "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ" in text:
            text = text.replace("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ", "‚ö° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ Telegram MarkdownV2
        formatted = telegramify_markdown.markdownify(text)
        return formatted
    except Exception as e:
        # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –±–∞–∑–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        print(f"Telegram formatting error: {e}")
        # –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ MarkdownV2
        text = text.replace("**", "*")  # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = text.replace("### ", "üîπ ")  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        text = text.replace("## ", "üî∏ ")  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        text = text.replace("# ", "üî∏ ")  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        return text


def generate_answer(query: str, context: list[dict], policy: dict[str, Any] | None = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä LLM —Å–æ–≥–ª–∞—Å–Ω–æ DEFAULT_LLM –∏ fallback-–ø–æ—Ä—è–¥–∫—É.
    - –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ (URL) –∏ —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å "–ü–æ–¥—Ä–æ–±–Ω–µ–µ".
    - –ü–æ—Ä—è–¥–æ–∫: DEFAULT_LLM -> GPT5 -> DEEPSEEK.
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞—è —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
    """
    policy = policy or {}
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª
    sources = []
    for c in context:
        url = (c.get("payload", {}) or {}).get("url")
        title = (c.get("payload", {}) or {}).get("title")
        if url:
            sources.append(f"- {title or '–ò—Å—Ç–æ—á–Ω–∏–∫'}: {url}")
    sources_block = "\n".join(sources)
    prompt = (
        "–í—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ edna Chat Center. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.\n"
        "–û—Ç–≤–µ—á–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, —Å–ø–∏—Å–∫–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**, ### –∑–∞–≥–æ–ª–æ–≤–∫–∏, * —Å–ø–∏—Å–∫–∏.\n"
        "–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.\n"
        f"–í–æ–ø—Ä–æ—Å: {query}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{sources_block}\n"
    )

    order = [DEFAULT_LLM, "GPT5", "DEEPSEEK"]
    for provider in order:
        try:
            if provider == "YANDEX":
                answer = _yandex_complete(prompt)
                return _format_for_telegram(answer)
            if provider == "GPT5":
                answer = _gpt5_complete(prompt)
                return _format_for_telegram(answer)
            if provider == "DEEPSEEK":
                answer = _deepseek_complete(prompt)
                return _format_for_telegram(answer)
        except Exception:
            continue
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


